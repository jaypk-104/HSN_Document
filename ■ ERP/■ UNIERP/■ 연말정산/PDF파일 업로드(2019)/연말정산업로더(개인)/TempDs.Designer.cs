//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.5485
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace NTS_Reader_CS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TempDs")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TempDs : global::System.Data.DataSet {
        
        private INSURDataTable tableINSUR;
        
        private MEDICALDataTable tableMEDICAL;
        
        private MONEYDataTable tableMONEY;
        
        private CHECK_CARDDataTable tableCHECK_CARD;
        
        private CREDIT_CARDDataTable tableCREDIT_CARD;
        
        private HOUSEDataTable tableHOUSE;
        
        private HOUSE2DataTable tableHOUSE2;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TempDs() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TempDs(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["INSUR"] != null)) {
                    base.Tables.Add(new INSURDataTable(ds.Tables["INSUR"]));
                }
                if ((ds.Tables["MEDICAL"] != null)) {
                    base.Tables.Add(new MEDICALDataTable(ds.Tables["MEDICAL"]));
                }
                if ((ds.Tables["MONEY"] != null)) {
                    base.Tables.Add(new MONEYDataTable(ds.Tables["MONEY"]));
                }
                if ((ds.Tables["CHECK_CARD"] != null)) {
                    base.Tables.Add(new CHECK_CARDDataTable(ds.Tables["CHECK_CARD"]));
                }
                if ((ds.Tables["CREDIT_CARD"] != null)) {
                    base.Tables.Add(new CREDIT_CARDDataTable(ds.Tables["CREDIT_CARD"]));
                }
                if ((ds.Tables["HOUSE"] != null)) {
                    base.Tables.Add(new HOUSEDataTable(ds.Tables["HOUSE"]));
                }
                if ((ds.Tables["HOUSE2"] != null)) {
                    base.Tables.Add(new HOUSE2DataTable(ds.Tables["HOUSE2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INSURDataTable INSUR {
            get {
                return this.tableINSUR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MEDICALDataTable MEDICAL {
            get {
                return this.tableMEDICAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MONEYDataTable MONEY {
            get {
                return this.tableMONEY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CHECK_CARDDataTable CHECK_CARD {
            get {
                return this.tableCHECK_CARD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CREDIT_CARDDataTable CREDIT_CARD {
            get {
                return this.tableCREDIT_CARD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HOUSEDataTable HOUSE {
            get {
                return this.tableHOUSE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HOUSE2DataTable HOUSE2 {
            get {
                return this.tableHOUSE2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TempDs cln = ((TempDs)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["INSUR"] != null)) {
                    base.Tables.Add(new INSURDataTable(ds.Tables["INSUR"]));
                }
                if ((ds.Tables["MEDICAL"] != null)) {
                    base.Tables.Add(new MEDICALDataTable(ds.Tables["MEDICAL"]));
                }
                if ((ds.Tables["MONEY"] != null)) {
                    base.Tables.Add(new MONEYDataTable(ds.Tables["MONEY"]));
                }
                if ((ds.Tables["CHECK_CARD"] != null)) {
                    base.Tables.Add(new CHECK_CARDDataTable(ds.Tables["CHECK_CARD"]));
                }
                if ((ds.Tables["CREDIT_CARD"] != null)) {
                    base.Tables.Add(new CREDIT_CARDDataTable(ds.Tables["CREDIT_CARD"]));
                }
                if ((ds.Tables["HOUSE"] != null)) {
                    base.Tables.Add(new HOUSEDataTable(ds.Tables["HOUSE"]));
                }
                if ((ds.Tables["HOUSE2"] != null)) {
                    base.Tables.Add(new HOUSE2DataTable(ds.Tables["HOUSE2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableINSUR = ((INSURDataTable)(base.Tables["INSUR"]));
            if ((initTable == true)) {
                if ((this.tableINSUR != null)) {
                    this.tableINSUR.InitVars();
                }
            }
            this.tableMEDICAL = ((MEDICALDataTable)(base.Tables["MEDICAL"]));
            if ((initTable == true)) {
                if ((this.tableMEDICAL != null)) {
                    this.tableMEDICAL.InitVars();
                }
            }
            this.tableMONEY = ((MONEYDataTable)(base.Tables["MONEY"]));
            if ((initTable == true)) {
                if ((this.tableMONEY != null)) {
                    this.tableMONEY.InitVars();
                }
            }
            this.tableCHECK_CARD = ((CHECK_CARDDataTable)(base.Tables["CHECK_CARD"]));
            if ((initTable == true)) {
                if ((this.tableCHECK_CARD != null)) {
                    this.tableCHECK_CARD.InitVars();
                }
            }
            this.tableCREDIT_CARD = ((CREDIT_CARDDataTable)(base.Tables["CREDIT_CARD"]));
            if ((initTable == true)) {
                if ((this.tableCREDIT_CARD != null)) {
                    this.tableCREDIT_CARD.InitVars();
                }
            }
            this.tableHOUSE = ((HOUSEDataTable)(base.Tables["HOUSE"]));
            if ((initTable == true)) {
                if ((this.tableHOUSE != null)) {
                    this.tableHOUSE.InitVars();
                }
            }
            this.tableHOUSE2 = ((HOUSE2DataTable)(base.Tables["HOUSE2"]));
            if ((initTable == true)) {
                if ((this.tableHOUSE2 != null)) {
                    this.tableHOUSE2.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TempDs";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TempDs.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableINSUR = new INSURDataTable();
            base.Tables.Add(this.tableINSUR);
            this.tableMEDICAL = new MEDICALDataTable();
            base.Tables.Add(this.tableMEDICAL);
            this.tableMONEY = new MONEYDataTable();
            base.Tables.Add(this.tableMONEY);
            this.tableCHECK_CARD = new CHECK_CARDDataTable();
            base.Tables.Add(this.tableCHECK_CARD);
            this.tableCREDIT_CARD = new CREDIT_CARDDataTable();
            base.Tables.Add(this.tableCREDIT_CARD);
            this.tableHOUSE = new HOUSEDataTable();
            base.Tables.Add(this.tableHOUSE);
            this.tableHOUSE2 = new HOUSE2DataTable();
            base.Tables.Add(this.tableHOUSE2);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeINSUR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMEDICAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMONEY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCHECK_CARD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCREDIT_CARD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHOUSE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHOUSE2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TempDs ds = new TempDs();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void INSURRowChangeEventHandler(object sender, INSURRowChangeEvent e);
        
        public delegate void MEDICALRowChangeEventHandler(object sender, MEDICALRowChangeEvent e);
        
        public delegate void MONEYRowChangeEventHandler(object sender, MONEYRowChangeEvent e);
        
        public delegate void CHECK_CARDRowChangeEventHandler(object sender, CHECK_CARDRowChangeEvent e);
        
        public delegate void CREDIT_CARDRowChangeEventHandler(object sender, CREDIT_CARDRowChangeEvent e);
        
        public delegate void HOUSERowChangeEventHandler(object sender, HOUSERowChangeEvent e);
        
        public delegate void HOUSE2RowChangeEventHandler(object sender, HOUSE2RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INSURDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnform_cd;
            
            private global::System.Data.DataColumn columnresid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnbusnid;
            
            private global::System.Data.DataColumn columntrade_nm;
            
            private global::System.Data.DataColumn columnacc_no;
            
            private global::System.Data.DataColumn columngoods_nm;
            
            private global::System.Data.DataColumn columninsul_resid;
            
            private global::System.Data.DataColumn columninsul_nm;
            
            private global::System.Data.DataColumn columnsum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INSURDataTable() {
                this.TableName = "INSUR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INSURDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected INSURDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn form_cdColumn {
                get {
                    return this.columnform_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn residColumn {
                get {
                    return this.columnresid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn busnidColumn {
                get {
                    return this.columnbusnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trade_nmColumn {
                get {
                    return this.columntrade_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn acc_noColumn {
                get {
                    return this.columnacc_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn goods_nmColumn {
                get {
                    return this.columngoods_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insul_residColumn {
                get {
                    return this.columninsul_resid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insul_nmColumn {
                get {
                    return this.columninsul_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INSURRow this[int index] {
                get {
                    return ((INSURRow)(this.Rows[index]));
                }
            }
            
            public event INSURRowChangeEventHandler INSURRowChanging;
            
            public event INSURRowChangeEventHandler INSURRowChanged;
            
            public event INSURRowChangeEventHandler INSURRowDeleting;
            
            public event INSURRowChangeEventHandler INSURRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddINSURRow(INSURRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INSURRow AddINSURRow(string form_cd, string resid, string name, string busnid, string trade_nm, string acc_no, string goods_nm, string insul_resid, string insul_nm, decimal sum) {
                INSURRow rowINSURRow = ((INSURRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        form_cd,
                        resid,
                        name,
                        busnid,
                        trade_nm,
                        acc_no,
                        goods_nm,
                        insul_resid,
                        insul_nm,
                        sum};
                rowINSURRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINSURRow);
                return rowINSURRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                INSURDataTable cln = ((INSURDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INSURDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnform_cd = base.Columns["form_cd"];
                this.columnresid = base.Columns["resid"];
                this.columnname = base.Columns["name"];
                this.columnbusnid = base.Columns["busnid"];
                this.columntrade_nm = base.Columns["trade_nm"];
                this.columnacc_no = base.Columns["acc_no"];
                this.columngoods_nm = base.Columns["goods_nm"];
                this.columninsul_resid = base.Columns["insul_resid"];
                this.columninsul_nm = base.Columns["insul_nm"];
                this.columnsum = base.Columns["sum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnform_cd = new global::System.Data.DataColumn("form_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnform_cd);
                this.columnresid = new global::System.Data.DataColumn("resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnbusnid = new global::System.Data.DataColumn("busnid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbusnid);
                this.columntrade_nm = new global::System.Data.DataColumn("trade_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrade_nm);
                this.columnacc_no = new global::System.Data.DataColumn("acc_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnacc_no);
                this.columngoods_nm = new global::System.Data.DataColumn("goods_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngoods_nm);
                this.columninsul_resid = new global::System.Data.DataColumn("insul_resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsul_resid);
                this.columninsul_nm = new global::System.Data.DataColumn("insul_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsul_nm);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
                this.columnsum.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INSURRow NewINSURRow() {
                return ((INSURRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INSURRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(INSURRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INSURRowChanged != null)) {
                    this.INSURRowChanged(this, new INSURRowChangeEvent(((INSURRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INSURRowChanging != null)) {
                    this.INSURRowChanging(this, new INSURRowChangeEvent(((INSURRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INSURRowDeleted != null)) {
                    this.INSURRowDeleted(this, new INSURRowChangeEvent(((INSURRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INSURRowDeleting != null)) {
                    this.INSURRowDeleting(this, new INSURRowChangeEvent(((INSURRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveINSURRow(INSURRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TempDs ds = new TempDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INSURDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MEDICALDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnform_cd;
            
            private global::System.Data.DataColumn columnresid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnbusnid;
            
            private global::System.Data.DataColumn columntrade_nm;
            
            private global::System.Data.DataColumn columnsum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDICALDataTable() {
                this.TableName = "MEDICAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDICALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MEDICALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn form_cdColumn {
                get {
                    return this.columnform_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn residColumn {
                get {
                    return this.columnresid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn busnidColumn {
                get {
                    return this.columnbusnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trade_nmColumn {
                get {
                    return this.columntrade_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDICALRow this[int index] {
                get {
                    return ((MEDICALRow)(this.Rows[index]));
                }
            }
            
            public event MEDICALRowChangeEventHandler MEDICALRowChanging;
            
            public event MEDICALRowChangeEventHandler MEDICALRowChanged;
            
            public event MEDICALRowChangeEventHandler MEDICALRowDeleting;
            
            public event MEDICALRowChangeEventHandler MEDICALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMEDICALRow(MEDICALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDICALRow AddMEDICALRow(string form_cd, string resid, string name, string busnid, string trade_nm, decimal sum) {
                MEDICALRow rowMEDICALRow = ((MEDICALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        form_cd,
                        resid,
                        name,
                        busnid,
                        trade_nm,
                        sum};
                rowMEDICALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMEDICALRow);
                return rowMEDICALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MEDICALDataTable cln = ((MEDICALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MEDICALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnform_cd = base.Columns["form_cd"];
                this.columnresid = base.Columns["resid"];
                this.columnname = base.Columns["name"];
                this.columnbusnid = base.Columns["busnid"];
                this.columntrade_nm = base.Columns["trade_nm"];
                this.columnsum = base.Columns["sum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnform_cd = new global::System.Data.DataColumn("form_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnform_cd);
                this.columnresid = new global::System.Data.DataColumn("resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnbusnid = new global::System.Data.DataColumn("busnid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbusnid);
                this.columntrade_nm = new global::System.Data.DataColumn("trade_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrade_nm);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDICALRow NewMEDICALRow() {
                return ((MEDICALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MEDICALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MEDICALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MEDICALRowChanged != null)) {
                    this.MEDICALRowChanged(this, new MEDICALRowChangeEvent(((MEDICALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MEDICALRowChanging != null)) {
                    this.MEDICALRowChanging(this, new MEDICALRowChangeEvent(((MEDICALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MEDICALRowDeleted != null)) {
                    this.MEDICALRowDeleted(this, new MEDICALRowChangeEvent(((MEDICALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MEDICALRowDeleting != null)) {
                    this.MEDICALRowDeleting(this, new MEDICALRowChangeEvent(((MEDICALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMEDICALRow(MEDICALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TempDs ds = new TempDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MEDICALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MONEYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnform_cd;
            
            private global::System.Data.DataColumn columnresid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnftyr_tot_amt;
            
            private global::System.Data.DataColumn columnftyr_market_tot_amt;
            
            private global::System.Data.DataColumn columnftyr_tmoney_tot_amt;
            
            private global::System.Data.DataColumn columnpre_tot_amt;
            
            private global::System.Data.DataColumn columnpre_market_tot_amt;
            
            private global::System.Data.DataColumn columnpre_tmoney_tot_amt;
            
            private global::System.Data.DataColumn columnuse_place_cd;
            
            private global::System.Data.DataColumn columnfirst_tot_amt;
            
            private global::System.Data.DataColumn columnsecond_tot_amt;
            
            private global::System.Data.DataColumn columnfirst_year_tot_amt;
            
            private global::System.Data.DataColumn columnsecond_year_tot_amt;
            
            private global::System.Data.DataColumn columnsum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONEYDataTable() {
                this.TableName = "MONEY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MONEYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MONEYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn form_cdColumn {
                get {
                    return this.columnform_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn residColumn {
                get {
                    return this.columnresid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_tot_amtColumn {
                get {
                    return this.columnftyr_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_market_tot_amtColumn {
                get {
                    return this.columnftyr_market_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_tmoney_tot_amtColumn {
                get {
                    return this.columnftyr_tmoney_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_tot_amtColumn {
                get {
                    return this.columnpre_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_market_tot_amtColumn {
                get {
                    return this.columnpre_market_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_tmoney_tot_amtColumn {
                get {
                    return this.columnpre_tmoney_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn use_place_cdColumn {
                get {
                    return this.columnuse_place_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_tot_amtColumn {
                get {
                    return this.columnfirst_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn second_tot_amtColumn {
                get {
                    return this.columnsecond_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_year_tot_amtColumn {
                get {
                    return this.columnfirst_year_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn second_year_tot_amtColumn {
                get {
                    return this.columnsecond_year_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONEYRow this[int index] {
                get {
                    return ((MONEYRow)(this.Rows[index]));
                }
            }
            
            public event MONEYRowChangeEventHandler MONEYRowChanging;
            
            public event MONEYRowChangeEventHandler MONEYRowChanged;
            
            public event MONEYRowChangeEventHandler MONEYRowDeleting;
            
            public event MONEYRowChangeEventHandler MONEYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMONEYRow(MONEYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONEYRow AddMONEYRow(string form_cd, string resid, string name, decimal ftyr_tot_amt, decimal ftyr_market_tot_amt, decimal ftyr_tmoney_tot_amt, decimal pre_tot_amt, decimal pre_market_tot_amt, decimal pre_tmoney_tot_amt, string use_place_cd, decimal first_tot_amt, decimal second_tot_amt, decimal first_year_tot_amt, decimal second_year_tot_amt, decimal sum) {
                MONEYRow rowMONEYRow = ((MONEYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        form_cd,
                        resid,
                        name,
                        ftyr_tot_amt,
                        ftyr_market_tot_amt,
                        ftyr_tmoney_tot_amt,
                        pre_tot_amt,
                        pre_market_tot_amt,
                        pre_tmoney_tot_amt,
                        use_place_cd,
                        first_tot_amt,
                        second_tot_amt,
                        first_year_tot_amt,
                        second_year_tot_amt,
                        sum};
                rowMONEYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMONEYRow);
                return rowMONEYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MONEYDataTable cln = ((MONEYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MONEYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnform_cd = base.Columns["form_cd"];
                this.columnresid = base.Columns["resid"];
                this.columnname = base.Columns["name"];
                this.columnftyr_tot_amt = base.Columns["ftyr_tot_amt"];
                this.columnftyr_market_tot_amt = base.Columns["ftyr_market_tot_amt"];
                this.columnftyr_tmoney_tot_amt = base.Columns["ftyr_tmoney_tot_amt"];
                this.columnpre_tot_amt = base.Columns["pre_tot_amt"];
                this.columnpre_market_tot_amt = base.Columns["pre_market_tot_amt"];
                this.columnpre_tmoney_tot_amt = base.Columns["pre_tmoney_tot_amt"];
                this.columnuse_place_cd = base.Columns["use_place_cd"];
                this.columnfirst_tot_amt = base.Columns["first_tot_amt"];
                this.columnsecond_tot_amt = base.Columns["second_tot_amt"];
                this.columnfirst_year_tot_amt = base.Columns["first_year_tot_amt"];
                this.columnsecond_year_tot_amt = base.Columns["second_year_tot_amt"];
                this.columnsum = base.Columns["sum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnform_cd = new global::System.Data.DataColumn("form_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnform_cd);
                this.columnresid = new global::System.Data.DataColumn("resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnftyr_tot_amt = new global::System.Data.DataColumn("ftyr_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_tot_amt);
                this.columnftyr_market_tot_amt = new global::System.Data.DataColumn("ftyr_market_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_market_tot_amt);
                this.columnftyr_tmoney_tot_amt = new global::System.Data.DataColumn("ftyr_tmoney_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_tmoney_tot_amt);
                this.columnpre_tot_amt = new global::System.Data.DataColumn("pre_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_tot_amt);
                this.columnpre_market_tot_amt = new global::System.Data.DataColumn("pre_market_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_market_tot_amt);
                this.columnpre_tmoney_tot_amt = new global::System.Data.DataColumn("pre_tmoney_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_tmoney_tot_amt);
                this.columnuse_place_cd = new global::System.Data.DataColumn("use_place_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_place_cd);
                this.columnfirst_tot_amt = new global::System.Data.DataColumn("first_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_tot_amt);
                this.columnsecond_tot_amt = new global::System.Data.DataColumn("second_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsecond_tot_amt);
                this.columnfirst_year_tot_amt = new global::System.Data.DataColumn("first_year_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_year_tot_amt);
                this.columnsecond_year_tot_amt = new global::System.Data.DataColumn("second_year_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsecond_year_tot_amt);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
                this.columnftyr_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnftyr_market_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnftyr_tmoney_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_market_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_tmoney_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnfirst_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsecond_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnfirst_year_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsecond_year_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsum.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONEYRow NewMONEYRow() {
                return ((MONEYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MONEYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MONEYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MONEYRowChanged != null)) {
                    this.MONEYRowChanged(this, new MONEYRowChangeEvent(((MONEYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MONEYRowChanging != null)) {
                    this.MONEYRowChanging(this, new MONEYRowChangeEvent(((MONEYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MONEYRowDeleted != null)) {
                    this.MONEYRowDeleted(this, new MONEYRowChangeEvent(((MONEYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MONEYRowDeleting != null)) {
                    this.MONEYRowDeleting(this, new MONEYRowChangeEvent(((MONEYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMONEYRow(MONEYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TempDs ds = new TempDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MONEYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CHECK_CARDDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnform_cd;
            
            private global::System.Data.DataColumn columnresid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnftyr_tot_amt;
            
            private global::System.Data.DataColumn columnftyr_market_tot_amt;
            
            private global::System.Data.DataColumn columnftyr_tmoney_tot_amt;
            
            private global::System.Data.DataColumn columnpre_tot_amt;
            
            private global::System.Data.DataColumn columnpre_market_tot_amt;
            
            private global::System.Data.DataColumn columnpre_tmoney_tot_amt;
            
            private global::System.Data.DataColumn columnbusnid;
            
            private global::System.Data.DataColumn columntrade_nm;
            
            private global::System.Data.DataColumn columnuse_place_cd;
            
            private global::System.Data.DataColumn columnfirst_tot_amt;
            
            private global::System.Data.DataColumn columnsecond_tot_amt;
            
            private global::System.Data.DataColumn columnfirst_year_tot_amt;
            
            private global::System.Data.DataColumn columnsecond_year_tot_amt;
            
            private global::System.Data.DataColumn columnsum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHECK_CARDDataTable() {
                this.TableName = "CHECK_CARD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CHECK_CARDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CHECK_CARDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn form_cdColumn {
                get {
                    return this.columnform_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn residColumn {
                get {
                    return this.columnresid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_tot_amtColumn {
                get {
                    return this.columnftyr_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_market_tot_amtColumn {
                get {
                    return this.columnftyr_market_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_tmoney_tot_amtColumn {
                get {
                    return this.columnftyr_tmoney_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_tot_amtColumn {
                get {
                    return this.columnpre_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_market_tot_amtColumn {
                get {
                    return this.columnpre_market_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_tmoney_tot_amtColumn {
                get {
                    return this.columnpre_tmoney_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn busnidColumn {
                get {
                    return this.columnbusnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trade_nmColumn {
                get {
                    return this.columntrade_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn use_place_cdColumn {
                get {
                    return this.columnuse_place_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_tot_amtColumn {
                get {
                    return this.columnfirst_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn second_tot_amtColumn {
                get {
                    return this.columnsecond_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_year_tot_amtColumn {
                get {
                    return this.columnfirst_year_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn second_year_tot_amtColumn {
                get {
                    return this.columnsecond_year_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHECK_CARDRow this[int index] {
                get {
                    return ((CHECK_CARDRow)(this.Rows[index]));
                }
            }
            
            public event CHECK_CARDRowChangeEventHandler CHECK_CARDRowChanging;
            
            public event CHECK_CARDRowChangeEventHandler CHECK_CARDRowChanged;
            
            public event CHECK_CARDRowChangeEventHandler CHECK_CARDRowDeleting;
            
            public event CHECK_CARDRowChangeEventHandler CHECK_CARDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCHECK_CARDRow(CHECK_CARDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHECK_CARDRow AddCHECK_CARDRow(
                        string form_cd, 
                        string resid, 
                        string name, 
                        decimal ftyr_tot_amt, 
                        decimal ftyr_market_tot_amt, 
                        decimal ftyr_tmoney_tot_amt, 
                        decimal pre_tot_amt, 
                        decimal pre_market_tot_amt, 
                        decimal pre_tmoney_tot_amt, 
                        string busnid, 
                        string trade_nm, 
                        string use_place_cd, 
                        decimal first_tot_amt, 
                        decimal second_tot_amt, 
                        decimal first_year_tot_amt, 
                        decimal second_year_tot_amt, 
                        decimal sum) {
                CHECK_CARDRow rowCHECK_CARDRow = ((CHECK_CARDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        form_cd,
                        resid,
                        name,
                        ftyr_tot_amt,
                        ftyr_market_tot_amt,
                        ftyr_tmoney_tot_amt,
                        pre_tot_amt,
                        pre_market_tot_amt,
                        pre_tmoney_tot_amt,
                        busnid,
                        trade_nm,
                        use_place_cd,
                        first_tot_amt,
                        second_tot_amt,
                        first_year_tot_amt,
                        second_year_tot_amt,
                        sum};
                rowCHECK_CARDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCHECK_CARDRow);
                return rowCHECK_CARDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CHECK_CARDDataTable cln = ((CHECK_CARDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CHECK_CARDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnform_cd = base.Columns["form_cd"];
                this.columnresid = base.Columns["resid"];
                this.columnname = base.Columns["name"];
                this.columnftyr_tot_amt = base.Columns["ftyr_tot_amt"];
                this.columnftyr_market_tot_amt = base.Columns["ftyr_market_tot_amt"];
                this.columnftyr_tmoney_tot_amt = base.Columns["ftyr_tmoney_tot_amt"];
                this.columnpre_tot_amt = base.Columns["pre_tot_amt"];
                this.columnpre_market_tot_amt = base.Columns["pre_market_tot_amt"];
                this.columnpre_tmoney_tot_amt = base.Columns["pre_tmoney_tot_amt"];
                this.columnbusnid = base.Columns["busnid"];
                this.columntrade_nm = base.Columns["trade_nm"];
                this.columnuse_place_cd = base.Columns["use_place_cd"];
                this.columnfirst_tot_amt = base.Columns["first_tot_amt"];
                this.columnsecond_tot_amt = base.Columns["second_tot_amt"];
                this.columnfirst_year_tot_amt = base.Columns["first_year_tot_amt"];
                this.columnsecond_year_tot_amt = base.Columns["second_year_tot_amt"];
                this.columnsum = base.Columns["sum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnform_cd = new global::System.Data.DataColumn("form_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnform_cd);
                this.columnresid = new global::System.Data.DataColumn("resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnftyr_tot_amt = new global::System.Data.DataColumn("ftyr_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_tot_amt);
                this.columnftyr_market_tot_amt = new global::System.Data.DataColumn("ftyr_market_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_market_tot_amt);
                this.columnftyr_tmoney_tot_amt = new global::System.Data.DataColumn("ftyr_tmoney_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_tmoney_tot_amt);
                this.columnpre_tot_amt = new global::System.Data.DataColumn("pre_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_tot_amt);
                this.columnpre_market_tot_amt = new global::System.Data.DataColumn("pre_market_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_market_tot_amt);
                this.columnpre_tmoney_tot_amt = new global::System.Data.DataColumn("pre_tmoney_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_tmoney_tot_amt);
                this.columnbusnid = new global::System.Data.DataColumn("busnid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbusnid);
                this.columntrade_nm = new global::System.Data.DataColumn("trade_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrade_nm);
                this.columnuse_place_cd = new global::System.Data.DataColumn("use_place_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_place_cd);
                this.columnfirst_tot_amt = new global::System.Data.DataColumn("first_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_tot_amt);
                this.columnsecond_tot_amt = new global::System.Data.DataColumn("second_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsecond_tot_amt);
                this.columnfirst_year_tot_amt = new global::System.Data.DataColumn("first_year_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_year_tot_amt);
                this.columnsecond_year_tot_amt = new global::System.Data.DataColumn("second_year_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsecond_year_tot_amt);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
                this.columnftyr_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnftyr_market_tot_amt.Caption = "ftyr_marker_tot_amt";
                this.columnftyr_market_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnftyr_tmoney_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_market_tot_amt.Caption = "pre_marker_tot_amt";
                this.columnpre_market_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_tmoney_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnfirst_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsecond_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnfirst_year_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsecond_year_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsum.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHECK_CARDRow NewCHECK_CARDRow() {
                return ((CHECK_CARDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CHECK_CARDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CHECK_CARDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CHECK_CARDRowChanged != null)) {
                    this.CHECK_CARDRowChanged(this, new CHECK_CARDRowChangeEvent(((CHECK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CHECK_CARDRowChanging != null)) {
                    this.CHECK_CARDRowChanging(this, new CHECK_CARDRowChangeEvent(((CHECK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CHECK_CARDRowDeleted != null)) {
                    this.CHECK_CARDRowDeleted(this, new CHECK_CARDRowChangeEvent(((CHECK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CHECK_CARDRowDeleting != null)) {
                    this.CHECK_CARDRowDeleting(this, new CHECK_CARDRowChangeEvent(((CHECK_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCHECK_CARDRow(CHECK_CARDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TempDs ds = new TempDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CHECK_CARDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CREDIT_CARDDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnform_cd;
            
            private global::System.Data.DataColumn columnresid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnftyr_tot_amt;
            
            private global::System.Data.DataColumn columnftyr_market_tot_amt;
            
            private global::System.Data.DataColumn columnftyr_tmoney_tot_amt;
            
            private global::System.Data.DataColumn columnpre_tot_amt;
            
            private global::System.Data.DataColumn columnpre_market_tot_amt;
            
            private global::System.Data.DataColumn columnpre_tmoney_tot_amt;
            
            private global::System.Data.DataColumn columnbusnid;
            
            private global::System.Data.DataColumn columntrade_nm;
            
            private global::System.Data.DataColumn columnuse_place_cd;
            
            private global::System.Data.DataColumn columnfirst_tot_amt;
            
            private global::System.Data.DataColumn columnsecond_tot_amt;
            
            private global::System.Data.DataColumn columnfirst_year_tot_amt;
            
            private global::System.Data.DataColumn columnsecond_year_tot_amt;
            
            private global::System.Data.DataColumn columnsum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CREDIT_CARDDataTable() {
                this.TableName = "CREDIT_CARD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CREDIT_CARDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CREDIT_CARDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn form_cdColumn {
                get {
                    return this.columnform_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn residColumn {
                get {
                    return this.columnresid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_tot_amtColumn {
                get {
                    return this.columnftyr_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_market_tot_amtColumn {
                get {
                    return this.columnftyr_market_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ftyr_tmoney_tot_amtColumn {
                get {
                    return this.columnftyr_tmoney_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_tot_amtColumn {
                get {
                    return this.columnpre_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_market_tot_amtColumn {
                get {
                    return this.columnpre_market_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pre_tmoney_tot_amtColumn {
                get {
                    return this.columnpre_tmoney_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn busnidColumn {
                get {
                    return this.columnbusnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trade_nmColumn {
                get {
                    return this.columntrade_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn use_place_cdColumn {
                get {
                    return this.columnuse_place_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_tot_amtColumn {
                get {
                    return this.columnfirst_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn second_tot_amtColumn {
                get {
                    return this.columnsecond_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_year_tot_amtColumn {
                get {
                    return this.columnfirst_year_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn second_year_tot_amtColumn {
                get {
                    return this.columnsecond_year_tot_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CREDIT_CARDRow this[int index] {
                get {
                    return ((CREDIT_CARDRow)(this.Rows[index]));
                }
            }
            
            public event CREDIT_CARDRowChangeEventHandler CREDIT_CARDRowChanging;
            
            public event CREDIT_CARDRowChangeEventHandler CREDIT_CARDRowChanged;
            
            public event CREDIT_CARDRowChangeEventHandler CREDIT_CARDRowDeleting;
            
            public event CREDIT_CARDRowChangeEventHandler CREDIT_CARDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCREDIT_CARDRow(CREDIT_CARDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CREDIT_CARDRow AddCREDIT_CARDRow(
                        string form_cd, 
                        string resid, 
                        string name, 
                        decimal ftyr_tot_amt, 
                        decimal ftyr_market_tot_amt, 
                        decimal ftyr_tmoney_tot_amt, 
                        decimal pre_tot_amt, 
                        decimal pre_market_tot_amt, 
                        decimal pre_tmoney_tot_amt, 
                        string busnid, 
                        string trade_nm, 
                        string use_place_cd, 
                        decimal first_tot_amt, 
                        decimal second_tot_amt, 
                        decimal first_year_tot_amt, 
                        decimal second_year_tot_amt, 
                        decimal sum) {
                CREDIT_CARDRow rowCREDIT_CARDRow = ((CREDIT_CARDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        form_cd,
                        resid,
                        name,
                        ftyr_tot_amt,
                        ftyr_market_tot_amt,
                        ftyr_tmoney_tot_amt,
                        pre_tot_amt,
                        pre_market_tot_amt,
                        pre_tmoney_tot_amt,
                        busnid,
                        trade_nm,
                        use_place_cd,
                        first_tot_amt,
                        second_tot_amt,
                        first_year_tot_amt,
                        second_year_tot_amt,
                        sum};
                rowCREDIT_CARDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCREDIT_CARDRow);
                return rowCREDIT_CARDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CREDIT_CARDDataTable cln = ((CREDIT_CARDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CREDIT_CARDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnform_cd = base.Columns["form_cd"];
                this.columnresid = base.Columns["resid"];
                this.columnname = base.Columns["name"];
                this.columnftyr_tot_amt = base.Columns["ftyr_tot_amt"];
                this.columnftyr_market_tot_amt = base.Columns["ftyr_market_tot_amt"];
                this.columnftyr_tmoney_tot_amt = base.Columns["ftyr_tmoney_tot_amt"];
                this.columnpre_tot_amt = base.Columns["pre_tot_amt"];
                this.columnpre_market_tot_amt = base.Columns["pre_market_tot_amt"];
                this.columnpre_tmoney_tot_amt = base.Columns["pre_tmoney_tot_amt"];
                this.columnbusnid = base.Columns["busnid"];
                this.columntrade_nm = base.Columns["trade_nm"];
                this.columnuse_place_cd = base.Columns["use_place_cd"];
                this.columnfirst_tot_amt = base.Columns["first_tot_amt"];
                this.columnsecond_tot_amt = base.Columns["second_tot_amt"];
                this.columnfirst_year_tot_amt = base.Columns["first_year_tot_amt"];
                this.columnsecond_year_tot_amt = base.Columns["second_year_tot_amt"];
                this.columnsum = base.Columns["sum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnform_cd = new global::System.Data.DataColumn("form_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnform_cd);
                this.columnresid = new global::System.Data.DataColumn("resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnftyr_tot_amt = new global::System.Data.DataColumn("ftyr_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_tot_amt);
                this.columnftyr_market_tot_amt = new global::System.Data.DataColumn("ftyr_market_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_market_tot_amt);
                this.columnftyr_tmoney_tot_amt = new global::System.Data.DataColumn("ftyr_tmoney_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnftyr_tmoney_tot_amt);
                this.columnpre_tot_amt = new global::System.Data.DataColumn("pre_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_tot_amt);
                this.columnpre_market_tot_amt = new global::System.Data.DataColumn("pre_market_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_market_tot_amt);
                this.columnpre_tmoney_tot_amt = new global::System.Data.DataColumn("pre_tmoney_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpre_tmoney_tot_amt);
                this.columnbusnid = new global::System.Data.DataColumn("busnid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbusnid);
                this.columntrade_nm = new global::System.Data.DataColumn("trade_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrade_nm);
                this.columnuse_place_cd = new global::System.Data.DataColumn("use_place_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuse_place_cd);
                this.columnfirst_tot_amt = new global::System.Data.DataColumn("first_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_tot_amt);
                this.columnsecond_tot_amt = new global::System.Data.DataColumn("second_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsecond_tot_amt);
                this.columnfirst_year_tot_amt = new global::System.Data.DataColumn("first_year_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_year_tot_amt);
                this.columnsecond_year_tot_amt = new global::System.Data.DataColumn("second_year_tot_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsecond_year_tot_amt);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
                this.columnftyr_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnftyr_market_tot_amt.Caption = "ftyr_marker_tot_amt";
                this.columnftyr_market_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnftyr_tmoney_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_market_tot_amt.Caption = "pre_marker_tot_amt";
                this.columnpre_market_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnpre_tmoney_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnfirst_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsecond_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnfirst_year_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsecond_year_tot_amt.DefaultValue = ((decimal)(0m));
                this.columnsum.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CREDIT_CARDRow NewCREDIT_CARDRow() {
                return ((CREDIT_CARDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CREDIT_CARDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CREDIT_CARDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CREDIT_CARDRowChanged != null)) {
                    this.CREDIT_CARDRowChanged(this, new CREDIT_CARDRowChangeEvent(((CREDIT_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CREDIT_CARDRowChanging != null)) {
                    this.CREDIT_CARDRowChanging(this, new CREDIT_CARDRowChangeEvent(((CREDIT_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CREDIT_CARDRowDeleted != null)) {
                    this.CREDIT_CARDRowDeleted(this, new CREDIT_CARDRowChangeEvent(((CREDIT_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CREDIT_CARDRowDeleting != null)) {
                    this.CREDIT_CARDRowDeleting(this, new CREDIT_CARDRowChangeEvent(((CREDIT_CARDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCREDIT_CARDRow(CREDIT_CARDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TempDs ds = new TempDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CREDIT_CARDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HOUSEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnform_cd;
            
            private global::System.Data.DataColumn columnresid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnbusnid;
            
            private global::System.Data.DataColumn columntrade_nm;
            
            private global::System.Data.DataColumn columnacc_no;
            
            private global::System.Data.DataColumn columnhouse_take_dt;
            
            private global::System.Data.DataColumn columnmort_setup_dt;
            
            private global::System.Data.DataColumn columnstart_dt;
            
            private global::System.Data.DataColumn columnend_dt;
            
            private global::System.Data.DataColumn columnrepay_years;
            
            private global::System.Data.DataColumn columnlend_goods_nm;
            
            private global::System.Data.DataColumn columndebt;
            
            private global::System.Data.DataColumn columnfixed_rate_debt;
            
            private global::System.Data.DataColumn columnnot_defer_debt;
            
            private global::System.Data.DataColumn columnthis_year_rede_amt;
            
            private global::System.Data.DataColumn columnsum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSEDataTable() {
                this.TableName = "HOUSE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HOUSEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HOUSEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn form_cdColumn {
                get {
                    return this.columnform_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn residColumn {
                get {
                    return this.columnresid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn busnidColumn {
                get {
                    return this.columnbusnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trade_nmColumn {
                get {
                    return this.columntrade_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn acc_noColumn {
                get {
                    return this.columnacc_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn house_take_dtColumn {
                get {
                    return this.columnhouse_take_dt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mort_setup_dtColumn {
                get {
                    return this.columnmort_setup_dt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_dtColumn {
                get {
                    return this.columnstart_dt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn end_dtColumn {
                get {
                    return this.columnend_dt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn repay_yearsColumn {
                get {
                    return this.columnrepay_years;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lend_goods_nmColumn {
                get {
                    return this.columnlend_goods_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn debtColumn {
                get {
                    return this.columndebt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fixed_rate_debtColumn {
                get {
                    return this.columnfixed_rate_debt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn not_defer_debtColumn {
                get {
                    return this.columnnot_defer_debt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn this_year_rede_amtColumn {
                get {
                    return this.columnthis_year_rede_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSERow this[int index] {
                get {
                    return ((HOUSERow)(this.Rows[index]));
                }
            }
            
            public event HOUSERowChangeEventHandler HOUSERowChanging;
            
            public event HOUSERowChangeEventHandler HOUSERowChanged;
            
            public event HOUSERowChangeEventHandler HOUSERowDeleting;
            
            public event HOUSERowChangeEventHandler HOUSERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHOUSERow(HOUSERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSERow AddHOUSERow(
                        string form_cd, 
                        string resid, 
                        string name, 
                        string busnid, 
                        string trade_nm, 
                        string acc_no, 
                        string house_take_dt, 
                        string mort_setup_dt, 
                        string start_dt, 
                        string end_dt, 
                        decimal repay_years, 
                        string lend_goods_nm, 
                        decimal debt, 
                        decimal fixed_rate_debt, 
                        decimal not_defer_debt, 
                        decimal this_year_rede_amt, 
                        decimal sum) {
                HOUSERow rowHOUSERow = ((HOUSERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        form_cd,
                        resid,
                        name,
                        busnid,
                        trade_nm,
                        acc_no,
                        house_take_dt,
                        mort_setup_dt,
                        start_dt,
                        end_dt,
                        repay_years,
                        lend_goods_nm,
                        debt,
                        fixed_rate_debt,
                        not_defer_debt,
                        this_year_rede_amt,
                        sum};
                rowHOUSERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHOUSERow);
                return rowHOUSERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HOUSEDataTable cln = ((HOUSEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HOUSEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnform_cd = base.Columns["form_cd"];
                this.columnresid = base.Columns["resid"];
                this.columnname = base.Columns["name"];
                this.columnbusnid = base.Columns["busnid"];
                this.columntrade_nm = base.Columns["trade_nm"];
                this.columnacc_no = base.Columns["acc_no"];
                this.columnhouse_take_dt = base.Columns["house_take_dt"];
                this.columnmort_setup_dt = base.Columns["mort_setup_dt"];
                this.columnstart_dt = base.Columns["start_dt"];
                this.columnend_dt = base.Columns["end_dt"];
                this.columnrepay_years = base.Columns["repay_years"];
                this.columnlend_goods_nm = base.Columns["lend_goods_nm"];
                this.columndebt = base.Columns["debt"];
                this.columnfixed_rate_debt = base.Columns["fixed_rate_debt"];
                this.columnnot_defer_debt = base.Columns["not_defer_debt"];
                this.columnthis_year_rede_amt = base.Columns["this_year_rede_amt"];
                this.columnsum = base.Columns["sum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnform_cd = new global::System.Data.DataColumn("form_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnform_cd);
                this.columnresid = new global::System.Data.DataColumn("resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnbusnid = new global::System.Data.DataColumn("busnid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbusnid);
                this.columntrade_nm = new global::System.Data.DataColumn("trade_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrade_nm);
                this.columnacc_no = new global::System.Data.DataColumn("acc_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnacc_no);
                this.columnhouse_take_dt = new global::System.Data.DataColumn("house_take_dt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhouse_take_dt);
                this.columnmort_setup_dt = new global::System.Data.DataColumn("mort_setup_dt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmort_setup_dt);
                this.columnstart_dt = new global::System.Data.DataColumn("start_dt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_dt);
                this.columnend_dt = new global::System.Data.DataColumn("end_dt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_dt);
                this.columnrepay_years = new global::System.Data.DataColumn("repay_years", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrepay_years);
                this.columnlend_goods_nm = new global::System.Data.DataColumn("lend_goods_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlend_goods_nm);
                this.columndebt = new global::System.Data.DataColumn("debt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndebt);
                this.columnfixed_rate_debt = new global::System.Data.DataColumn("fixed_rate_debt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfixed_rate_debt);
                this.columnnot_defer_debt = new global::System.Data.DataColumn("not_defer_debt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnot_defer_debt);
                this.columnthis_year_rede_amt = new global::System.Data.DataColumn("this_year_rede_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnthis_year_rede_amt);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
                this.columnrepay_years.DefaultValue = ((decimal)(0m));
                this.columndebt.DefaultValue = ((decimal)(0m));
                this.columnfixed_rate_debt.DefaultValue = ((decimal)(0m));
                this.columnnot_defer_debt.DefaultValue = ((decimal)(0m));
                this.columnthis_year_rede_amt.DefaultValue = ((decimal)(0m));
                this.columnsum.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSERow NewHOUSERow() {
                return ((HOUSERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HOUSERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HOUSERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HOUSERowChanged != null)) {
                    this.HOUSERowChanged(this, new HOUSERowChangeEvent(((HOUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HOUSERowChanging != null)) {
                    this.HOUSERowChanging(this, new HOUSERowChangeEvent(((HOUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HOUSERowDeleted != null)) {
                    this.HOUSERowDeleted(this, new HOUSERowChangeEvent(((HOUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HOUSERowDeleting != null)) {
                    this.HOUSERowDeleting(this, new HOUSERowChangeEvent(((HOUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHOUSERow(HOUSERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TempDs ds = new TempDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HOUSEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HOUSE2DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnform_cd;
            
            private global::System.Data.DataColumn columnresid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnbusnid;
            
            private global::System.Data.DataColumn columntrade_nm;
            
            private global::System.Data.DataColumn columnacc_no;
            
            private global::System.Data.DataColumn columngoods_nm;
            
            private global::System.Data.DataColumn columnlend_dt;
            
            private global::System.Data.DataColumn columnsum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSE2DataTable() {
                this.TableName = "HOUSE2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HOUSE2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HOUSE2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn form_cdColumn {
                get {
                    return this.columnform_cd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn residColumn {
                get {
                    return this.columnresid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn busnidColumn {
                get {
                    return this.columnbusnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trade_nmColumn {
                get {
                    return this.columntrade_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn acc_noColumn {
                get {
                    return this.columnacc_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn goods_nmColumn {
                get {
                    return this.columngoods_nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lend_dtColumn {
                get {
                    return this.columnlend_dt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSE2Row this[int index] {
                get {
                    return ((HOUSE2Row)(this.Rows[index]));
                }
            }
            
            public event HOUSE2RowChangeEventHandler HOUSE2RowChanging;
            
            public event HOUSE2RowChangeEventHandler HOUSE2RowChanged;
            
            public event HOUSE2RowChangeEventHandler HOUSE2RowDeleting;
            
            public event HOUSE2RowChangeEventHandler HOUSE2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHOUSE2Row(HOUSE2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSE2Row AddHOUSE2Row(string form_cd, string resid, string name, string busnid, string trade_nm, string acc_no, string goods_nm, string lend_dt, decimal sum) {
                HOUSE2Row rowHOUSE2Row = ((HOUSE2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        form_cd,
                        resid,
                        name,
                        busnid,
                        trade_nm,
                        acc_no,
                        goods_nm,
                        lend_dt,
                        sum};
                rowHOUSE2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowHOUSE2Row);
                return rowHOUSE2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HOUSE2DataTable cln = ((HOUSE2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HOUSE2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnform_cd = base.Columns["form_cd"];
                this.columnresid = base.Columns["resid"];
                this.columnname = base.Columns["name"];
                this.columnbusnid = base.Columns["busnid"];
                this.columntrade_nm = base.Columns["trade_nm"];
                this.columnacc_no = base.Columns["acc_no"];
                this.columngoods_nm = base.Columns["goods_nm"];
                this.columnlend_dt = base.Columns["lend_dt"];
                this.columnsum = base.Columns["sum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnform_cd = new global::System.Data.DataColumn("form_cd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnform_cd);
                this.columnresid = new global::System.Data.DataColumn("resid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnbusnid = new global::System.Data.DataColumn("busnid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbusnid);
                this.columntrade_nm = new global::System.Data.DataColumn("trade_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrade_nm);
                this.columnacc_no = new global::System.Data.DataColumn("acc_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnacc_no);
                this.columngoods_nm = new global::System.Data.DataColumn("goods_nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngoods_nm);
                this.columnlend_dt = new global::System.Data.DataColumn("lend_dt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlend_dt);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
                this.columnsum.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSE2Row NewHOUSE2Row() {
                return ((HOUSE2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HOUSE2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HOUSE2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HOUSE2RowChanged != null)) {
                    this.HOUSE2RowChanged(this, new HOUSE2RowChangeEvent(((HOUSE2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HOUSE2RowChanging != null)) {
                    this.HOUSE2RowChanging(this, new HOUSE2RowChangeEvent(((HOUSE2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HOUSE2RowDeleted != null)) {
                    this.HOUSE2RowDeleted(this, new HOUSE2RowChangeEvent(((HOUSE2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HOUSE2RowDeleting != null)) {
                    this.HOUSE2RowDeleting(this, new HOUSE2RowChangeEvent(((HOUSE2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHOUSE2Row(HOUSE2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TempDs ds = new TempDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HOUSE2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class INSURRow : global::System.Data.DataRow {
            
            private INSURDataTable tableINSUR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INSURRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINSUR = ((INSURDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string form_cd {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.form_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'form_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.form_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resid {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string busnid {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.busnidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'busnid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.busnidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trade_nm {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.trade_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'trade_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.trade_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string acc_no {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.acc_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'acc_no\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.acc_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string goods_nm {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.goods_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'goods_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.goods_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string insul_resid {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.insul_residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'insul_resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.insul_residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string insul_nm {
                get {
                    try {
                        return ((string)(this[this.tableINSUR.insul_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'insul_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.insul_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tableINSUR.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'INSUR\' 테이블의 \'sum\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableINSUR.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isform_cdNull() {
                return this.IsNull(this.tableINSUR.form_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setform_cdNull() {
                this[this.tableINSUR.form_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresidNull() {
                return this.IsNull(this.tableINSUR.residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresidNull() {
                this[this.tableINSUR.residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableINSUR.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableINSUR.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbusnidNull() {
                return this.IsNull(this.tableINSUR.busnidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbusnidNull() {
                this[this.tableINSUR.busnidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istrade_nmNull() {
                return this.IsNull(this.tableINSUR.trade_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settrade_nmNull() {
                this[this.tableINSUR.trade_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isacc_noNull() {
                return this.IsNull(this.tableINSUR.acc_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setacc_noNull() {
                this[this.tableINSUR.acc_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgoods_nmNull() {
                return this.IsNull(this.tableINSUR.goods_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgoods_nmNull() {
                this[this.tableINSUR.goods_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinsul_residNull() {
                return this.IsNull(this.tableINSUR.insul_residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinsul_residNull() {
                this[this.tableINSUR.insul_residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinsul_nmNull() {
                return this.IsNull(this.tableINSUR.insul_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinsul_nmNull() {
                this[this.tableINSUR.insul_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tableINSUR.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tableINSUR.sumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MEDICALRow : global::System.Data.DataRow {
            
            private MEDICALDataTable tableMEDICAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MEDICALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMEDICAL = ((MEDICALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string form_cd {
                get {
                    try {
                        return ((string)(this[this.tableMEDICAL.form_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MEDICAL\' 테이블의 \'form_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMEDICAL.form_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resid {
                get {
                    try {
                        return ((string)(this[this.tableMEDICAL.residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MEDICAL\' 테이블의 \'resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMEDICAL.residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableMEDICAL.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MEDICAL\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMEDICAL.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string busnid {
                get {
                    try {
                        return ((string)(this[this.tableMEDICAL.busnidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MEDICAL\' 테이블의 \'busnid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMEDICAL.busnidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trade_nm {
                get {
                    try {
                        return ((string)(this[this.tableMEDICAL.trade_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MEDICAL\' 테이블의 \'trade_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMEDICAL.trade_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tableMEDICAL.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MEDICAL\' 테이블의 \'sum\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMEDICAL.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isform_cdNull() {
                return this.IsNull(this.tableMEDICAL.form_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setform_cdNull() {
                this[this.tableMEDICAL.form_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresidNull() {
                return this.IsNull(this.tableMEDICAL.residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresidNull() {
                this[this.tableMEDICAL.residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableMEDICAL.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableMEDICAL.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbusnidNull() {
                return this.IsNull(this.tableMEDICAL.busnidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbusnidNull() {
                this[this.tableMEDICAL.busnidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istrade_nmNull() {
                return this.IsNull(this.tableMEDICAL.trade_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settrade_nmNull() {
                this[this.tableMEDICAL.trade_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tableMEDICAL.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tableMEDICAL.sumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MONEYRow : global::System.Data.DataRow {
            
            private MONEYDataTable tableMONEY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MONEYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMONEY = ((MONEYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string form_cd {
                get {
                    try {
                        return ((string)(this[this.tableMONEY.form_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'form_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.form_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resid {
                get {
                    try {
                        return ((string)(this[this.tableMONEY.residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableMONEY.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.ftyr_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'ftyr_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.ftyr_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_market_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.ftyr_market_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'ftyr_market_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.ftyr_market_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_tmoney_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.ftyr_tmoney_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'ftyr_tmoney_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.ftyr_tmoney_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.pre_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'pre_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.pre_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_market_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.pre_market_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'pre_market_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.pre_market_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_tmoney_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.pre_tmoney_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'pre_tmoney_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.pre_tmoney_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string use_place_cd {
                get {
                    try {
                        return ((string)(this[this.tableMONEY.use_place_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'use_place_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.use_place_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal first_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.first_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'first_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.first_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal second_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.second_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'second_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.second_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal first_year_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.first_year_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'first_year_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.first_year_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal second_year_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.second_year_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'second_year_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.second_year_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tableMONEY.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'MONEY\' 테이블의 \'sum\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableMONEY.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isform_cdNull() {
                return this.IsNull(this.tableMONEY.form_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setform_cdNull() {
                this[this.tableMONEY.form_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresidNull() {
                return this.IsNull(this.tableMONEY.residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresidNull() {
                this[this.tableMONEY.residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableMONEY.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableMONEY.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_tot_amtNull() {
                return this.IsNull(this.tableMONEY.ftyr_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_tot_amtNull() {
                this[this.tableMONEY.ftyr_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_market_tot_amtNull() {
                return this.IsNull(this.tableMONEY.ftyr_market_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_market_tot_amtNull() {
                this[this.tableMONEY.ftyr_market_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_tmoney_tot_amtNull() {
                return this.IsNull(this.tableMONEY.ftyr_tmoney_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_tmoney_tot_amtNull() {
                this[this.tableMONEY.ftyr_tmoney_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_tot_amtNull() {
                return this.IsNull(this.tableMONEY.pre_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_tot_amtNull() {
                this[this.tableMONEY.pre_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_market_tot_amtNull() {
                return this.IsNull(this.tableMONEY.pre_market_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_market_tot_amtNull() {
                this[this.tableMONEY.pre_market_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_tmoney_tot_amtNull() {
                return this.IsNull(this.tableMONEY.pre_tmoney_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_tmoney_tot_amtNull() {
                this[this.tableMONEY.pre_tmoney_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuse_place_cdNull() {
                return this.IsNull(this.tableMONEY.use_place_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuse_place_cdNull() {
                this[this.tableMONEY.use_place_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_tot_amtNull() {
                return this.IsNull(this.tableMONEY.first_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_tot_amtNull() {
                this[this.tableMONEY.first_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issecond_tot_amtNull() {
                return this.IsNull(this.tableMONEY.second_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsecond_tot_amtNull() {
                this[this.tableMONEY.second_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_year_tot_amtNull() {
                return this.IsNull(this.tableMONEY.first_year_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_year_tot_amtNull() {
                this[this.tableMONEY.first_year_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issecond_year_tot_amtNull() {
                return this.IsNull(this.tableMONEY.second_year_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsecond_year_tot_amtNull() {
                this[this.tableMONEY.second_year_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tableMONEY.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tableMONEY.sumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CHECK_CARDRow : global::System.Data.DataRow {
            
            private CHECK_CARDDataTable tableCHECK_CARD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CHECK_CARDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCHECK_CARD = ((CHECK_CARDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string form_cd {
                get {
                    try {
                        return ((string)(this[this.tableCHECK_CARD.form_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'form_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.form_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resid {
                get {
                    try {
                        return ((string)(this[this.tableCHECK_CARD.residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableCHECK_CARD.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.ftyr_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'ftyr_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.ftyr_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_market_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.ftyr_market_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'ftyr_market_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.ftyr_market_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_tmoney_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.ftyr_tmoney_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'ftyr_tmoney_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.ftyr_tmoney_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.pre_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'pre_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.pre_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_market_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.pre_market_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'pre_market_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.pre_market_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_tmoney_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.pre_tmoney_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'pre_tmoney_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.pre_tmoney_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string busnid {
                get {
                    try {
                        return ((string)(this[this.tableCHECK_CARD.busnidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'busnid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.busnidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trade_nm {
                get {
                    try {
                        return ((string)(this[this.tableCHECK_CARD.trade_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'trade_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.trade_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string use_place_cd {
                get {
                    try {
                        return ((string)(this[this.tableCHECK_CARD.use_place_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'use_place_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.use_place_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal first_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.first_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'first_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.first_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal second_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.second_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'second_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.second_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal first_year_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.first_year_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'first_year_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.first_year_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal second_year_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.second_year_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'second_year_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.second_year_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tableCHECK_CARD.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CHECK_CARD\' 테이블의 \'sum\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCHECK_CARD.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isform_cdNull() {
                return this.IsNull(this.tableCHECK_CARD.form_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setform_cdNull() {
                this[this.tableCHECK_CARD.form_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresidNull() {
                return this.IsNull(this.tableCHECK_CARD.residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresidNull() {
                this[this.tableCHECK_CARD.residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableCHECK_CARD.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableCHECK_CARD.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.ftyr_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_tot_amtNull() {
                this[this.tableCHECK_CARD.ftyr_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_market_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.ftyr_market_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_market_tot_amtNull() {
                this[this.tableCHECK_CARD.ftyr_market_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_tmoney_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.ftyr_tmoney_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_tmoney_tot_amtNull() {
                this[this.tableCHECK_CARD.ftyr_tmoney_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.pre_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_tot_amtNull() {
                this[this.tableCHECK_CARD.pre_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_market_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.pre_market_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_market_tot_amtNull() {
                this[this.tableCHECK_CARD.pre_market_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_tmoney_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.pre_tmoney_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_tmoney_tot_amtNull() {
                this[this.tableCHECK_CARD.pre_tmoney_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbusnidNull() {
                return this.IsNull(this.tableCHECK_CARD.busnidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbusnidNull() {
                this[this.tableCHECK_CARD.busnidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istrade_nmNull() {
                return this.IsNull(this.tableCHECK_CARD.trade_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settrade_nmNull() {
                this[this.tableCHECK_CARD.trade_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuse_place_cdNull() {
                return this.IsNull(this.tableCHECK_CARD.use_place_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuse_place_cdNull() {
                this[this.tableCHECK_CARD.use_place_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.first_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_tot_amtNull() {
                this[this.tableCHECK_CARD.first_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issecond_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.second_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsecond_tot_amtNull() {
                this[this.tableCHECK_CARD.second_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_year_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.first_year_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_year_tot_amtNull() {
                this[this.tableCHECK_CARD.first_year_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issecond_year_tot_amtNull() {
                return this.IsNull(this.tableCHECK_CARD.second_year_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsecond_year_tot_amtNull() {
                this[this.tableCHECK_CARD.second_year_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tableCHECK_CARD.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tableCHECK_CARD.sumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CREDIT_CARDRow : global::System.Data.DataRow {
            
            private CREDIT_CARDDataTable tableCREDIT_CARD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CREDIT_CARDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCREDIT_CARD = ((CREDIT_CARDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string form_cd {
                get {
                    try {
                        return ((string)(this[this.tableCREDIT_CARD.form_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'form_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.form_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resid {
                get {
                    try {
                        return ((string)(this[this.tableCREDIT_CARD.residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableCREDIT_CARD.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.ftyr_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'ftyr_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.ftyr_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_market_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.ftyr_market_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'ftyr_market_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.ftyr_market_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ftyr_tmoney_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.ftyr_tmoney_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'ftyr_tmoney_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.ftyr_tmoney_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.pre_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'pre_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.pre_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_market_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.pre_market_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'pre_market_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.pre_market_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pre_tmoney_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.pre_tmoney_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'pre_tmoney_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.pre_tmoney_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string busnid {
                get {
                    try {
                        return ((string)(this[this.tableCREDIT_CARD.busnidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'busnid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.busnidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trade_nm {
                get {
                    try {
                        return ((string)(this[this.tableCREDIT_CARD.trade_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'trade_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.trade_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string use_place_cd {
                get {
                    try {
                        return ((string)(this[this.tableCREDIT_CARD.use_place_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'use_place_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.use_place_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal first_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.first_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'first_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.first_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal second_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.second_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'second_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.second_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal first_year_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.first_year_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'first_year_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.first_year_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal second_year_tot_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.second_year_tot_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'second_year_tot_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.second_year_tot_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tableCREDIT_CARD.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'CREDIT_CARD\' 테이블의 \'sum\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableCREDIT_CARD.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isform_cdNull() {
                return this.IsNull(this.tableCREDIT_CARD.form_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setform_cdNull() {
                this[this.tableCREDIT_CARD.form_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresidNull() {
                return this.IsNull(this.tableCREDIT_CARD.residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresidNull() {
                this[this.tableCREDIT_CARD.residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableCREDIT_CARD.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableCREDIT_CARD.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.ftyr_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_tot_amtNull() {
                this[this.tableCREDIT_CARD.ftyr_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_market_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.ftyr_market_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_market_tot_amtNull() {
                this[this.tableCREDIT_CARD.ftyr_market_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isftyr_tmoney_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.ftyr_tmoney_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setftyr_tmoney_tot_amtNull() {
                this[this.tableCREDIT_CARD.ftyr_tmoney_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.pre_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_tot_amtNull() {
                this[this.tableCREDIT_CARD.pre_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_market_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.pre_market_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_market_tot_amtNull() {
                this[this.tableCREDIT_CARD.pre_market_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispre_tmoney_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.pre_tmoney_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpre_tmoney_tot_amtNull() {
                this[this.tableCREDIT_CARD.pre_tmoney_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbusnidNull() {
                return this.IsNull(this.tableCREDIT_CARD.busnidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbusnidNull() {
                this[this.tableCREDIT_CARD.busnidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istrade_nmNull() {
                return this.IsNull(this.tableCREDIT_CARD.trade_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settrade_nmNull() {
                this[this.tableCREDIT_CARD.trade_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuse_place_cdNull() {
                return this.IsNull(this.tableCREDIT_CARD.use_place_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuse_place_cdNull() {
                this[this.tableCREDIT_CARD.use_place_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.first_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_tot_amtNull() {
                this[this.tableCREDIT_CARD.first_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issecond_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.second_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsecond_tot_amtNull() {
                this[this.tableCREDIT_CARD.second_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_year_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.first_year_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_year_tot_amtNull() {
                this[this.tableCREDIT_CARD.first_year_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issecond_year_tot_amtNull() {
                return this.IsNull(this.tableCREDIT_CARD.second_year_tot_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsecond_year_tot_amtNull() {
                this[this.tableCREDIT_CARD.second_year_tot_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tableCREDIT_CARD.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tableCREDIT_CARD.sumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HOUSERow : global::System.Data.DataRow {
            
            private HOUSEDataTable tableHOUSE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HOUSERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHOUSE = ((HOUSEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string form_cd {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.form_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'form_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.form_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resid {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string busnid {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.busnidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'busnid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.busnidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trade_nm {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.trade_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'trade_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.trade_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string acc_no {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.acc_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'acc_no\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.acc_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string house_take_dt {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.house_take_dtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'house_take_dt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.house_take_dtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mort_setup_dt {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.mort_setup_dtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'mort_setup_dt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.mort_setup_dtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string start_dt {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.start_dtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'start_dt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.start_dtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string end_dt {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.end_dtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'end_dt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.end_dtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal repay_years {
                get {
                    try {
                        return ((decimal)(this[this.tableHOUSE.repay_yearsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'repay_years\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.repay_yearsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lend_goods_nm {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE.lend_goods_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'lend_goods_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.lend_goods_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal debt {
                get {
                    try {
                        return ((decimal)(this[this.tableHOUSE.debtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'debt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.debtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fixed_rate_debt {
                get {
                    try {
                        return ((decimal)(this[this.tableHOUSE.fixed_rate_debtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'fixed_rate_debt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.fixed_rate_debtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal not_defer_debt {
                get {
                    try {
                        return ((decimal)(this[this.tableHOUSE.not_defer_debtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'not_defer_debt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.not_defer_debtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal this_year_rede_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableHOUSE.this_year_rede_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'this_year_rede_amt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.this_year_rede_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tableHOUSE.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE\' 테이블의 \'sum\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isform_cdNull() {
                return this.IsNull(this.tableHOUSE.form_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setform_cdNull() {
                this[this.tableHOUSE.form_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresidNull() {
                return this.IsNull(this.tableHOUSE.residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresidNull() {
                this[this.tableHOUSE.residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableHOUSE.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableHOUSE.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbusnidNull() {
                return this.IsNull(this.tableHOUSE.busnidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbusnidNull() {
                this[this.tableHOUSE.busnidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istrade_nmNull() {
                return this.IsNull(this.tableHOUSE.trade_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settrade_nmNull() {
                this[this.tableHOUSE.trade_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isacc_noNull() {
                return this.IsNull(this.tableHOUSE.acc_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setacc_noNull() {
                this[this.tableHOUSE.acc_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishouse_take_dtNull() {
                return this.IsNull(this.tableHOUSE.house_take_dtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethouse_take_dtNull() {
                this[this.tableHOUSE.house_take_dtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismort_setup_dtNull() {
                return this.IsNull(this.tableHOUSE.mort_setup_dtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmort_setup_dtNull() {
                this[this.tableHOUSE.mort_setup_dtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstart_dtNull() {
                return this.IsNull(this.tableHOUSE.start_dtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstart_dtNull() {
                this[this.tableHOUSE.start_dtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isend_dtNull() {
                return this.IsNull(this.tableHOUSE.end_dtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setend_dtNull() {
                this[this.tableHOUSE.end_dtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrepay_yearsNull() {
                return this.IsNull(this.tableHOUSE.repay_yearsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrepay_yearsNull() {
                this[this.tableHOUSE.repay_yearsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islend_goods_nmNull() {
                return this.IsNull(this.tableHOUSE.lend_goods_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlend_goods_nmNull() {
                this[this.tableHOUSE.lend_goods_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdebtNull() {
                return this.IsNull(this.tableHOUSE.debtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdebtNull() {
                this[this.tableHOUSE.debtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfixed_rate_debtNull() {
                return this.IsNull(this.tableHOUSE.fixed_rate_debtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfixed_rate_debtNull() {
                this[this.tableHOUSE.fixed_rate_debtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnot_defer_debtNull() {
                return this.IsNull(this.tableHOUSE.not_defer_debtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnot_defer_debtNull() {
                this[this.tableHOUSE.not_defer_debtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isthis_year_rede_amtNull() {
                return this.IsNull(this.tableHOUSE.this_year_rede_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setthis_year_rede_amtNull() {
                this[this.tableHOUSE.this_year_rede_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tableHOUSE.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tableHOUSE.sumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HOUSE2Row : global::System.Data.DataRow {
            
            private HOUSE2DataTable tableHOUSE2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HOUSE2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHOUSE2 = ((HOUSE2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string form_cd {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.form_cdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'form_cd\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.form_cdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resid {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.residColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'resid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.residColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'name\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string busnid {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.busnidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'busnid\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.busnidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string trade_nm {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.trade_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'trade_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.trade_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string acc_no {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.acc_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'acc_no\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.acc_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string goods_nm {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.goods_nmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'goods_nm\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.goods_nmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lend_dt {
                get {
                    try {
                        return ((string)(this[this.tableHOUSE2.lend_dtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'lend_dt\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.lend_dtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tableHOUSE2.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("\'HOUSE2\' 테이블의 \'sum\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tableHOUSE2.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isform_cdNull() {
                return this.IsNull(this.tableHOUSE2.form_cdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setform_cdNull() {
                this[this.tableHOUSE2.form_cdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresidNull() {
                return this.IsNull(this.tableHOUSE2.residColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresidNull() {
                this[this.tableHOUSE2.residColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableHOUSE2.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableHOUSE2.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbusnidNull() {
                return this.IsNull(this.tableHOUSE2.busnidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbusnidNull() {
                this[this.tableHOUSE2.busnidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istrade_nmNull() {
                return this.IsNull(this.tableHOUSE2.trade_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settrade_nmNull() {
                this[this.tableHOUSE2.trade_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isacc_noNull() {
                return this.IsNull(this.tableHOUSE2.acc_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setacc_noNull() {
                this[this.tableHOUSE2.acc_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgoods_nmNull() {
                return this.IsNull(this.tableHOUSE2.goods_nmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgoods_nmNull() {
                this[this.tableHOUSE2.goods_nmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islend_dtNull() {
                return this.IsNull(this.tableHOUSE2.lend_dtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlend_dtNull() {
                this[this.tableHOUSE2.lend_dtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tableHOUSE2.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tableHOUSE2.sumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class INSURRowChangeEvent : global::System.EventArgs {
            
            private INSURRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INSURRowChangeEvent(INSURRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INSURRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MEDICALRowChangeEvent : global::System.EventArgs {
            
            private MEDICALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDICALRowChangeEvent(MEDICALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MEDICALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MONEYRowChangeEvent : global::System.EventArgs {
            
            private MONEYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONEYRowChangeEvent(MONEYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MONEYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CHECK_CARDRowChangeEvent : global::System.EventArgs {
            
            private CHECK_CARDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHECK_CARDRowChangeEvent(CHECK_CARDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CHECK_CARDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CREDIT_CARDRowChangeEvent : global::System.EventArgs {
            
            private CREDIT_CARDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CREDIT_CARDRowChangeEvent(CREDIT_CARDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CREDIT_CARDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HOUSERowChangeEvent : global::System.EventArgs {
            
            private HOUSERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSERowChangeEvent(HOUSERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HOUSE2RowChangeEvent : global::System.EventArgs {
            
            private HOUSE2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSE2RowChangeEvent(HOUSE2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOUSE2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591